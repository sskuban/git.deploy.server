const spawn = require("child_process").spawn;
const express = require("express");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
const REPOSITORIES = require("./repository.json");

app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use("/webhook", (req, res, next) => {
  console.log(`üì® Webhook received: ${req.method} ${req.path}`);
  console.log("üîë X-Hub-Signature-256:", req.headers["x-hub-signature-256"]);
  console.log("üîë X-Gogs-Signature:", req.headers["x-gogs-signature"]);
  console.log("üéØ GitHub Event:", req.headers["x-github-event"]);
  next();
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ SHA256
function verifySignature(secret, signature, payload) {
  if (!signature) {
    console.error("‚ùå No signature provided");
    return false;
  }

  const expectedSignature =
    "sha256=" +
    crypto.createHmac("sha256", secret).update(payload).digest("hex");

  console.log("üîê Signature verification:");
  console.log("   Expected:", expectedSignature);
  console.log("   Received:", signature);

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
  if (expectedSignature.length !== signature.length) {
    console.log("   Result: ‚ùå Invalid (length mismatch)");
    return false;
  }

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
  try {
    const isValid = crypto.timingSafeEqual(
      Buffer.from(expectedSignature),
      Buffer.from(signature)
    );
    console.log("   Result:", isValid ? "‚úÖ Valid" : "‚ùå Invalid");
    return isValid;
  } catch (error) {
    console.error("   Result: ‚ùå Invalid (comparison error)", error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π webhook endpoint —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
app.post("/webhook/:repository", (req, res) => {
  const repositoryParam = req.params.repository.replace("-", "/");

  console.log(`üîç Processing webhook for: ${repositoryParam}`);

  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  const repoConfig = REPOSITORIES[repositoryParam];

  if (!repoConfig) {
    console.error(`‚ùå Repository not found: ${repositoryParam}`);
    return res.status(404).json({
      error: "Repository not found",
      availableRepositories: Object.keys(REPOSITORIES),
    });
  }

  console.log(`‚úÖ Repository config found`);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const signature =
    req.headers["x-hub-signature-256"] ?? req.headers["x-gogs-signature"];
  const rawBody = JSON.stringify(req.body);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
  if (repoConfig.verify) {
    if (!verifySignature(repoConfig.secret, signature, rawBody)) {
      console.error("‚ùå Signature verification failed");
      return res.status(401).json({
        error: "Signature verification failed",
        message: "X-Hub-Signature-256 or X-Gogs-Signature does not match",
      });
    }
    console.log("‚úÖ Signature verified successfully");
  } else {
    console.log("‚úÖ Signature verified skipped");
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
  const event = req.headers["x-github-event"];

  switch (event) {
    case "push":
      console.log("üöÄ Processing push event");
      handlePushEvent(req.body, repoConfig);
      break;
    case "ping":
      console.log("üèì Processing ping event");
      return res
        .status(200)
        .json({ status: "pong", message: "Webhook is working" });
    default:
      console.log(`‚ÑπÔ∏è  Ignoring event: ${event}`);
  }

  res.status(200).json({
    status: "success",
    message: "Webhook processed successfully",
    repository: repositoryParam,
    event: event,
  });
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ push —Å–æ–±—ã—Ç–∏–π
function handlePushEvent(payload, repoConfig) {
  const repoName = payload.repository?.full_name || "unknown";
  const branch = payload.ref
    ? payload.ref.replace("refs/heads/", "")
    : "unknown";

  console.log(`üéØ Repository: ${repoName}`);
  console.log(`üåø Branch: ${branch}`);
  console.log(`üéØ Target branch: ${repoConfig.branch}`);

  if (branch === repoConfig.branch) {
    console.log(`üöÄ Starting deployment for ${repoConfig.projectName}...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    if (!fs.existsSync(repoConfig.deployScript)) {
      console.error(`‚ùå Deploy script not found: ${repoConfig.deployScript}`);
      return;
    }

    console.log(`üìú Executing script: ${repoConfig.deployScript}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è
    const deploy = spawn("bash", [repoConfig.deployScript], {
      env: {
        ...process.env,
        REPO_NAME: repoName,
        BRANCH: branch,
        PROJECT_NAME: repoConfig.projectName,
        DEPLOY_TIMESTAMP: Date.now().toString(),
        COMMIT_ID: payload.after || "unknown",
        COMMIT_MESSAGE: payload.head_commit?.message || "No message",
      },
    });

    deploy.stdout.on("data", (data) => {
      const output = data.toString().trim();
      console.log(`[${repoConfig.projectName}] üìù ${output}`);
    });

    deploy.stderr.on("data", (data) => {
      const output = data.toString().trim();
      console.error(`[${repoConfig.projectName}] üí• ${output}`);
    });

    deploy.on("close", (code) => {
      if (code === 0) {
        console.log(
          `[${repoConfig.projectName}] ‚úÖ Deployment completed successfully`
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π
        logDeployment(repoName, branch, "success", "Deployment completed");
      } else {
        console.error(
          `[${repoConfig.projectName}] ‚ùå Deployment failed with code ${code}`
        );
        logDeployment(
          repoName,
          branch,
          "failed",
          `Deployment script exited with code ${code}`
        );
      }
    });

    deploy.on("error", (error) => {
      console.error(
        `[${repoConfig.projectName}] üí£ Failed to start deploy script:`,
        error
      );
      logDeployment(repoName, branch, "error", error.message);
    });
  } else {
    console.log(
      `‚è≠Ô∏è Skipping deployment - branch ${branch} does not match ${repoConfig.branch}`
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ–µ–≤
function logDeployment(repoName, branch, status, message) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    repository: repoName,
    branch: branch,
    status: status,
    message: message,
  };

  const logFile = "./deployments.log";

  try {
    fs.appendFileSync(logFile, JSON.stringify(logEntry) + "\n");
    console.log(`üìä Deployment logged: ${status}`);
  } catch (error) {
    console.error("‚ùå Failed to write deployment log:", error);
  }
}

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    server: "GitHub Webhook Server",
    version: "1.0.0",
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
app.get("/config", (req, res) => {
  const configInfo = Object.keys(REPOSITORIES).map((repo) => ({
    repository: repo,
    webhookPath: `/webhook/${repo.replace("/", "-")}`,
    hasSecret: !!REPOSITORIES[repo].secret,
    secretLength: REPOSITORIES[repo].secret.length,
    deployScript: REPOSITORIES[repo].deployScript,
    scriptExists: fs.existsSync(REPOSITORIES[repo].deployScript),
    branch: REPOSITORIES[repo].branch,
  }));

  res.json({
    status: "ok",
    repositories: configInfo,
  });
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
app.post("/test-signature", (req, res) => {
  const { secret, signature, payload } = req.body;

  if (!secret || !signature || !payload) {
    return res.status(400).json({
      error: "Missing parameters",
      required: ["secret", "signature", "payload"],
    });
  }

  const isValid = verifySignature(secret, signature, JSON.stringify(payload));

  res.json({
    valid: isValid,
    message: isValid ? "Signature is valid" : "Signature is invalid",
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({
    error: "Route not found",
    path: req.path,
    availableRoutes: {
      GET: ["/health", "/config"],
      POST: [
        ...Object.keys(REPOSITORIES).map(
          (repo) => `/webhook/${repo.replace("/", "-")}`
        ),
        "/test-signature",
      ],
    },
  });
});

// Error handling
app.use((err, req, res, next) => {
  console.error("üíÄ Server error:", err);
  res.status(500).json({
    error: "Internal server error",
    message: err.message,
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 9000;
app.listen(PORT, () => {
  console.log(`üöÄ GitHub Webhook Server started on port ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
  console.log(`üìç Config check: http://localhost:${PORT}/config`);
  console.log(`\nüìã Configured webhooks:`);

  Object.keys(REPOSITORIES).forEach((repo) => {
    const webhookPath = `/webhook/${repo.replace("/", "-")}`;
    console.log(`   POST http://localhost:${PORT}${webhookPath}`);
  });

  console.log(`\nüîß Repository configuration:`);
  Object.keys(REPOSITORIES).forEach((repo) => {
    const config = REPOSITORIES[repo];
    console.log(`   üìÅ ${repo}`);
    console.log(`      Script: ${config.deployScript}`);
    console.log(`      Exists: ${fs.existsSync(config.deployScript)}`);
    console.log(`      Branch: ${config.branch}`);
    console.log(`      Secret: ${config.secret ? "‚úì Set" : "‚úó Missing"}`);
  });
});
